import{_ as D}from"./index.72713afa.js";import{r as E,C as w}from"./index.392a35c9.js";import{a as N,p,b as y}from"./QCalendarTask.bf436935.js";import{w as u,h as J}from"./utiFunc.12687b08.js";var m;(function(n){n[n.Sunday=1]="Sunday",n[n.Monday=2]="Monday",n[n.Tuesday=3]="Tuesday",n[n.Wednesday=4]="Wednesday",n[n.Thursday=5]="Thursday",n[n.Friday=6]="Friday",n[n.Saturday=7]="Saturday"})(m||(m={}));const o=E("LocalNotifications",{web:()=>D(()=>import("./web.6423b6c0.js"),["assets/web.6423b6c0.js","assets/index.392a35c9.js","assets/index.72713afa.js","assets/index.f80becc5.css","assets/QCalendarTask.bf436935.js"]).then(n=>new n.LocalNotificationsWeb)}),l=w.getPlatform();class C{constructor(){this.pending=[],this.realPlat=null,this.deliveredNotifications=[],this.doInit(),this.seen={},this.lastSeen=null}doInit(){l!="web"?(console.log("CapacitorNotificationsWeb>>ANDROID Platform",l),this.realPlat=l):(console.log("CapacitorNotificationsWeb>>WEB Platform",l),this.realPlat=l),this.checkPermissions(),this.addListeners(),this.createChannel(),this.registerActions(),this.getPending(),this.getDeliveredNotifications()}doPrint(){console.log("CapacitorNotificationsWeb>>","ALLGOOD")}getState(){return{platform:this.realPlat,pending:this.pending.length,delivered:this.deliveredNotifications.length}}async checkPermissions(){let i=await o.checkPermissions();if(console.log("checkPermissions>>CheckP",JSON.stringify(i)),i.display==="prompt"&&(i=await o.requestPermissions(),console.log("checkPermissions::requestP",JSON.stringify(i))),i.display!=="granted"&&console.log("checkPermissions::NOPE",i.display,i.receive),l!=="web"){let t=await o.checkExactNotificationSetting();console.log("ExactNotificationSetting>>CheckP",JSON.stringify(t)),t.exact_alarm!=="granted"&&(t=await o.changeExactNotificationSetting(),console.log("ExactNotificationSetting::requestP",JSON.stringify(t))),t.exact_alarm!=="granted"&&console.log("ExactNotificationSetting::NOPE",t.exact_alarm)}}notifClicked(i){console.log("notifClicked::WOAH >>clicked on notif:",i),chrome.tabs.create({url:i}),console.log("clicked on notif:",i),chrome.notifications.clear(i)}async addListeners(){if(l=="web"){await o.addListener("localNotificationReceived",i=>{console.log("localNotificationReceived",JSON.stringify(i)),i!==void 0?(this.deliveredNotifications.push(i),this.seen[i.id]=!0,this.lastSeen=i.id):(console.log("localNotificationReceived>>UNDEFINED...what to do?",i,JSON.stringify(this.seen),JSON.stringify(this.lastSeen)),this.lastSeen?this.lastSeen=null:console.log("localNotificationReceived>>UNDEFINED..inDeliv/pending?",i,JSON.stringify(this.deliveredNotifications),JSON.stringify(this.pending)))}),await o.addListener("localNotificationActionPerformed",i=>{console.log("localNotificationActionPerformed::ACtion>> ",JSON.stringify(i))});return}console.log("CapacitorNotificationsWeb::addListeners>>SKIPPED for ",l)}async getDeliveredNotifications(){let i=null;o.getDeliveredNotifications().then(t=>{console.log("getDeliveredNotifications",JSON.stringify(t)),i=t;for(const e in i.notifications)console.log("getDeliveredNotifications::Notif...inPENDING?"+e,JSON.stringify(i.notifications[e]),JSON.stringify(this.pending)),this.deliveredNotifications.push(i.notifications[e])}).catch(t=>{console.log("getDeliveredNotifications>>ERROR",JSON.stringify(t)),console.log(t)})}async createChannel(){if(l!=="web"){let i=await o.listChannels();console.log("createChannel",JSON.stringify(i));let t=!1;for(const s in i.channels)if(i.channels[s].id=="LocNotifs"){t=!0;break}if(t){console.log("createChannel>>WOO LocNotifs exists!!");return}await o.createChannel({id:"LocNotifs",name:"Notifs",description:"Blu Notifs",importance:5,visibility:1,vibration:!0});let e=await o.listChannels();console.log("createChannel>>channelz>>CREATED",JSON.stringify(e))}}async registerActions(){const i={start:{id:"start",title:"Start"},add:{id:"add",title:"Add3"},skip:{id:"skip",title:"Skip"},go:{id:"go",title:"Nav"},note:{id:"note",title:"Notey",input:!0}},t={id:"atStart",actions:[i.start,i.skip]},e={id:"atEnd",actions:[i.note,i.add]},s={id:"nav",actions:[i.start,i.go]};if(l!="web"){let a={types:[t,e,s]};o.registerActionTypes(a)}}async getPending(){const i=await o.getPending();console.log("getPending",JSON.stringify(i));let t=[];for(const e in i.notifications){let s=i.notifications[e],a=s.schedule.at,d=Date.parse(a),c=new Date(a),r=d-Date.now();r<=0?(console.log("getPending:: SKIPPED oldy>> ",r,JSON.stringify(a),JSON.stringify(c)),t.push({id:s.id})):(console.log("getPending:: Notif>>WOULDA>> ",JSON.stringify(s),JSON.stringify(a),JSON.stringify(new Date(d)),JSON.stringify(c)),this.pending.push({...s,schedule:{at:c,allowWhileIdle:!0}}))}t.length>0&&this.doCancel({notifications:[...t]})}async schedule(i){o.schedule(i).then(t=>{console.log("schedule>>good",JSON.stringify(t)),console.log(t),this.deliveredNotifications.push(...i.notifications);let e=this.pending.length;this.pending=this.pending.filter(s=>!i.notifications.find(a=>a.id===s.id)),e!=this.pending.length?console.log("schedule>>PENDING change",e,this.pending.length):console.log("schedule>>PENDING SAME",e,this.pending.length)}).catch(t=>{console.log("schedule>>ERROR",JSON.stringify(t)),console.log(t),this.pending.push(...i.notifications)})}addPendingEvts(i,t){for(const e of i){if(this.pending.some(g=>g.id==e.id)){let g=this.pending.find(v=>v.id==e.id);console.log("NotifHelper::addPendingEvt::SKIP present",JSON.stringify(e),JSON.stringify(g));continue}let a=N(y(t),{minute:p(e.start.time)}),d=Date.parse(`${a.date} ${a.time}`),c=new Date(d),r=N(y(t),{minute:p(e.end.time)}),S=Date.parse(`${r.date} ${r.time}`),O=new Date(S),f=u(e.start.time),h=u(e.end.time),P={title:`'${e.title}' Starting at ${f}`,body:`Be/Do '${e.title}' for ${e.duration} mins`,largeBody:`Of '${e==null?void 0:e.parent}' >> '${e.title}' (${e.score}) ends at ${h}
 Dismiss for reminder`,id:e.id,schedule:{at:c,allowWhileIdle:!0},actionTypeId:"atStart",iconColor:J(e.bgcolor),extra:{duration:e.duration,scorey:e.score,end:O,endsAt:h,name:e.title,parent:e==null?void 0:e.parent,startsAt:f},channelId:l!="web"?"LocNotifs":""};this.pending.push(P)}}scheduleLater(){o.schedule({notifications:[...this.pending]}).then(i=>{console.log("scheduleLater>>good",JSON.stringify(i))}).catch(i=>{console.log("scheduleLater>>ERROR",i),console.log(i)})}async cancel(i){for(let t=0;t<this.pending.length;t++)i==this.pending[t].id&&(console.log("cancel>>notif",i,JSON.stringify(this.pending[t])),this.doCancel({notifications:[this.pending[t]]}),this.pending.splice(t,1))}doCancel(i){o.cancel(i)}async removeDeliveredNotifications(i){return console.log("CapacitorNotificationsWeb::removeDeliveredNotifications"),o.removeDeliveredNotifications(i)}async removeAllDeliveredNotifications(){return console.log("CapacitorNotificationsWeb::removeAllDeliveredNotifications"),o.removeAllDeliveredNotifications()}}const R=new C;export{R as L};
