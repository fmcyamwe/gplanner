import{_ as P}from"./index.8d9f491f.js";import{r as v,C as D}from"./index.f1f77578.js";import{a as f,p as h,b as N}from"./QCalendarTask.f5cba6e2.js";import{w as p,h as E}from"./utiFunc.f569f737.js";var y;(function(n){n[n.Sunday=1]="Sunday",n[n.Monday=2]="Monday",n[n.Tuesday=3]="Tuesday",n[n.Wednesday=4]="Wednesday",n[n.Thursday=5]="Thursday",n[n.Friday=6]="Friday",n[n.Saturday=7]="Saturday"})(y||(y={}));const o=v("LocalNotifications",{web:()=>P(()=>import("./web.a7ccc19f.js"),["assets/web.a7ccc19f.js","assets/index.f1f77578.js","assets/index.8d9f491f.js","assets/index.f80becc5.css","assets/QCalendarTask.f5cba6e2.js"]).then(n=>new n.LocalNotificationsWeb)}),a=D.getPlatform();class J{constructor(){this.pending=[],this.realPlat=null,this.deliveredNotifications=[],this.doInit(),this.seen={},this.lastSeen=null}doInit(){a!="web"?(console.log("CapacitorNotificationsWeb>>ANDROID Platform",a),this.realPlat=a):(console.log("CapacitorNotificationsWeb>>WEB Platform",a),this.realPlat=a),this.checkPermissions(),this.addListeners(),this.createChannel(),this.registerActions(),this.getPending(),this.getDeliveredNotifications()}doPrint(){console.log("CapacitorNotificationsWeb>>","ALLGOOD")}getState(){return{platform:this.realPlat,pending:this.pending.length,delivered:this.deliveredNotifications.length}}async checkPermissions(){let i=await o.checkPermissions();if(console.log("checkPermissions>>CheckP",JSON.stringify(i)),i.display==="prompt"&&(i=await o.requestPermissions(),console.log("checkPermissions::requestP",JSON.stringify(i))),i.display!=="granted"&&console.log("checkPermissions::NOPE",i.display,i.receive),a!=="web"){let e=await o.checkExactNotificationSetting();console.log("ExactNotificationSetting>>CheckP",JSON.stringify(e)),e.exact_alarm!=="granted"&&(e=await o.changeExactNotificationSetting(),console.log("ExactNotificationSetting::requestP",JSON.stringify(e))),e.exact_alarm!=="granted"&&console.log("ExactNotificationSetting::NOPE",e.exact_alarm)}}notifClicked(i){console.log("notifClicked::WOAH >>clicked on notif:",i),chrome.tabs.create({url:i}),console.log("clicked on notif:",i),chrome.notifications.clear(i)}async addListeners(){if(a=="web"){await o.addListener("localNotificationReceived",i=>{console.log("localNotificationReceived",JSON.stringify(i)),i!==void 0?(this.deliveredNotifications.push(i),this.seen[i.id]=!0,this.lastSeen=i.id):(console.log("localNotificationReceived>>UNDEFINED...what to do?",i,JSON.stringify(this.seen),JSON.stringify(this.lastSeen)),this.lastSeen?this.lastSeen=null:console.log("localNotificationReceived>>UNDEFINED..inDeliv/pending?",i,JSON.stringify(this.deliveredNotifications),JSON.stringify(this.pending)))}),await o.addListener("localNotificationActionPerformed",i=>{console.log("localNotificationActionPerformed::ACtion>> ",JSON.stringify(i))});return}console.log("CapacitorNotificationsWeb::addListeners>>SKIPPED for ",a)}async getDeliveredNotifications(){let i=null;o.getDeliveredNotifications().then(e=>{console.log("getDeliveredNotifications",JSON.stringify(e)),i=e;for(const t in i.notifications)console.log("getDeliveredNotifications::Notif...inPENDING?"+t,JSON.stringify(i.notifications[t]),JSON.stringify(this.pending)),this.deliveredNotifications.push(i.notifications[t])}).catch(e=>{console.log("getDeliveredNotifications>>ERROR",JSON.stringify(e)),console.log(e)})}async createChannel(){if(a!=="web"){let i=await o.listChannels();console.log("createChannel",JSON.stringify(i));let e=!1;for(const s in i.channels)if(i.channels[s].id=="LocNotifs"){e=!0;break}if(e){console.log("createChannel>>WOO LocNotifs exists!!");return}await o.createChannel({id:"LocNotifs",name:"Notifs",description:"Blu Notifs",importance:5,visibility:1,vibration:!0});let t=await o.listChannels();console.log("createChannel>>channelz>>CREATED",JSON.stringify(t))}}async registerActions(){const i={start:{id:"start",title:"Start"},add:{id:"add",title:"Add3"},skip:{id:"skip",title:"Skip"},go:{id:"go",title:"Nav"},note:{id:"note",title:"Notey",input:!0}},e={id:"atStart",actions:[i.start,i.skip]},t={id:"atEnd",actions:[i.note,i.add]},s={id:"nav",actions:[i.start,i.go]};if(a!="web"){let l={types:[e,t,s]};o.registerActionTypes(l).then(()=>{console.log("registerActions")})}}async getPending(){const i=await o.getPending();console.log("getPending",JSON.stringify(i));for(const e in i.notifications){let t=i.notifications[e],s=t.schedule.at,l=Date.parse(s),c=new Date(s),r=l-Date.now();r<=0?console.log("getPending:: SKIPPED oldy>> ",r,JSON.stringify(s),JSON.stringify(l),JSON.stringify(c)):(console.log("getPending:: Notif>>WOULDA>> ",JSON.stringify(t),JSON.stringify(s),JSON.stringify(l),JSON.stringify(new Date(l)),JSON.stringify(c)),this.pending.push({...t,schedule:{at:c}}))}}async schedule(i){o.schedule(i).then(e=>{console.log("schedule>>good",JSON.stringify(e)),console.log(e),this.deliveredNotifications.push(...i.notifications);let t=this.pending.length;this.pending=this.pending.filter(s=>!i.notifications.find(l=>l.id===s.id)),t!=this.pending.length?console.log("schedule>>PENDING change",t,this.pending.length):console.log("schedule>>PENDING SAME",t,this.pending.length)}).catch(e=>{console.log("schedule>>ERROR",JSON.stringify(e)),console.log(e),this.pending.push(...i.notifications)})}addPendingEvts(i,e){for(const t of i){let s=f(N(e),{minute:h(t.start.time)}),l=Date.parse(`${s.date} ${s.time}`),c=new Date(l),r=f(N(e),{minute:h(t.end.time)}),u=Date.parse(`${r.date} ${r.time}`),m=new Date(u),d=p(t.start.time),g=p(t.end.time),S=t.start.time.split(":")[0]>=12?"PM":"AM",O={title:`'${t.title}' Starting at ${d}`,body:`Be/Do '${t.title}' for ${t.duration} mins`,largeBody:`Of '${t==null?void 0:t.parent}' >> '${t.title}' (${t.score}) ends at ${g}
 Dismiss for reminder`,id:t.id,schedule:{at:c,allowWhileIdle:!0},actionTypeId:"atStart",iconColor:E(t.bgcolor),extra:{duration:t.duration,scorey:t.score,end:m,endsAt:g,name:t.title,parent:t==null?void 0:t.parent,startsAt:d,around:S},channelId:a!="web"?"LocNotifs":""};this.pending.push(O)}}scheduleLater(){o.schedule({notifications:[...this.pending]}).then(i=>{console.log("scheduleLater>>good",JSON.stringify(i))}).catch(i=>{console.log("scheduleLater>>ERROR",i),console.log(i)})}async cancel(i){for(let e=0;e<this.pending.length;e++)i==this.pending[e].id&&(console.log("cancel>>notif",i,JSON.stringify(this.pending[e])),this.doCancel({notifications:[this.pending[e]]}),this.pending.splice(e,1))}doCancel(i){o.cancel(i)}async removeDeliveredNotifications(i){return console.log("CapacitorNotificationsWeb::removeDeliveredNotifications"),o.removeDeliveredNotifications(i)}async removeAllDeliveredNotifications(){return console.log("CapacitorNotificationsWeb::removeAllDeliveredNotifications"),o.removeAllDeliveredNotifications()}}const L=new J;export{L};
