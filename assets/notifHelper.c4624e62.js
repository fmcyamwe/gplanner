import{_ as E}from"./index.f3695b84.js";import{r as J,C as w}from"./index.2e147bce.js";import{a as N,p,b as y}from"./QCalendarTask.5a2d55d1.js";import{w as u,h as C}from"./utiFunc.12687b08.js";var m;(function(n){n[n.Sunday=1]="Sunday",n[n.Monday=2]="Monday",n[n.Tuesday=3]="Tuesday",n[n.Wednesday=4]="Wednesday",n[n.Thursday=5]="Thursday",n[n.Friday=6]="Friday",n[n.Saturday=7]="Saturday"})(m||(m={}));const o=J("LocalNotifications",{web:()=>E(()=>import("./web.6b2886a8.js"),["assets/web.6b2886a8.js","assets/index.2e147bce.js","assets/index.f3695b84.js","assets/index.f80becc5.css","assets/QCalendarTask.5a2d55d1.js"]).then(n=>new n.LocalNotificationsWeb)}),l=w.getPlatform();class A{constructor(){this.pending=[],this.realPlat=null,this.deliveredNotifications=[],this.doInit(),this.seen={},this.lastSeen=null}doInit(){l!="web"?(console.log("CapacitorNotificationsWeb>>ANDROID Platform",l),this.realPlat=l):(console.log("CapacitorNotificationsWeb>>WEB Platform",l),this.realPlat=l),this.checkPermissions(),this.addListeners(),this.createChannel(),this.registerActions(),this.getPending(),this.getDeliveredNotifications()}doPrint(){console.log("CapacitorNotificationsWeb>>","ALLGOOD")}getState(){return{platform:this.realPlat,pending:this.pending.length,delivered:this.deliveredNotifications.length}}async checkPermissions(){let i=await o.checkPermissions();if(console.log("checkPermissions>>CheckP",JSON.stringify(i)),i.display==="prompt"&&(i=await o.requestPermissions(),console.log("checkPermissions::requestP",JSON.stringify(i))),i.display!=="granted"&&console.log("checkPermissions::NOPE",i.display,i.receive),l!=="web"){let e=await o.checkExactNotificationSetting();console.log("ExactNotificationSetting>>CheckP",JSON.stringify(e)),e.exact_alarm!=="granted"&&(e=await o.changeExactNotificationSetting(),console.log("ExactNotificationSetting::requestP",JSON.stringify(e))),e.exact_alarm!=="granted"&&console.log("ExactNotificationSetting::NOPE",e.exact_alarm)}}notifClicked(i){console.log("notifClicked::WOAH >>clicked on notif:",i),chrome.tabs.create({url:i}),console.log("clicked on notif:",i),chrome.notifications.clear(i)}async addListeners(){if(l=="web"){await o.addListener("localNotificationReceived",i=>{console.log("localNotificationReceived",JSON.stringify(i)),i!==void 0?(this.deliveredNotifications.push(i),this.seen[i.id]=!0,this.lastSeen=i.id):(console.log("localNotificationReceived>>UNDEFINED...what to do?",i,JSON.stringify(this.seen),JSON.stringify(this.lastSeen)),this.lastSeen?this.lastSeen=null:console.log("localNotificationReceived>>UNDEFINED..inDeliv/pending?",i,JSON.stringify(this.deliveredNotifications),JSON.stringify(this.pending)))}),await o.addListener("localNotificationActionPerformed",i=>{console.log("localNotificationActionPerformed::ACtion>> ",JSON.stringify(i))});return}console.log("CapacitorNotificationsWeb::addListeners>>SKIPPED for ",l)}async getDeliveredNotifications(){let i=null;o.getDeliveredNotifications().then(e=>{console.log("getDeliveredNotifications",JSON.stringify(e)),i=e;for(const t in i.notifications)console.log("getDeliveredNotifications::Notif...inPENDING?"+t,JSON.stringify(i.notifications[t]),JSON.stringify(this.pending)),this.deliveredNotifications.push(i.notifications[t])}).catch(e=>{console.log("getDeliveredNotifications>>ERROR",JSON.stringify(e)),console.log(e)})}async createChannel(){if(l!=="web"){let i=await o.listChannels();console.log("createChannel",JSON.stringify(i));let e=!1;for(const s in i.channels)if(i.channels[s].id=="LocNotifs"){e=!0;break}if(e){console.log("createChannel>>WOO LocNotifs exists!!");return}await o.createChannel({id:"LocNotifs",name:"Notifs",description:"Blu Notifs",importance:5,visibility:1,vibration:!0});let t=await o.listChannels();console.log("createChannel>>channelz>>CREATED",JSON.stringify(t))}}async registerActions(){const i={start:{id:"start",title:"Start"},add:{id:"add",title:"Add3"},skip:{id:"skip",title:"Skip"},go:{id:"go",title:"Nav"},note:{id:"note",title:"Notey",input:!0}},e={id:"atStart",actions:[i.start,i.skip]},t={id:"atEnd",actions:[i.note,i.add]},s={id:"nav",actions:[i.start,i.go]};if(l!="web"){let a={types:[e,t,s]};o.registerActionTypes(a).then(()=>{console.log("registerActions")})}}async getPending(){const i=await o.getPending();console.log("getPending",JSON.stringify(i));let e=[];for(const t in i.notifications){let s=i.notifications[t],a=s.schedule.at,d=Date.parse(a),c=new Date(a),r=d-Date.now();r<=0?(console.log("getPending:: SKIPPED oldy>> ",r,JSON.stringify(a),JSON.stringify(c)),e.push({id:s.id})):(console.log("getPending:: Notif>>WOULDA>> ",JSON.stringify(s),JSON.stringify(a),JSON.stringify(new Date(d)),JSON.stringify(c)),this.pending.push({...s,schedule:{at:c}}))}e.length>0&&this.doCancel({notifications:[...e]})}async schedule(i){o.schedule(i).then(e=>{console.log("schedule>>good",JSON.stringify(e)),console.log(e),this.deliveredNotifications.push(...i.notifications);let t=this.pending.length;this.pending=this.pending.filter(s=>!i.notifications.find(a=>a.id===s.id)),t!=this.pending.length?console.log("schedule>>PENDING change",t,this.pending.length):console.log("schedule>>PENDING SAME",t,this.pending.length)}).catch(e=>{console.log("schedule>>ERROR",JSON.stringify(e)),console.log(e),this.pending.push(...i.notifications)})}addPendingEvts(i,e){for(const t of i){if(this.pending.some(g=>g.id==t.id)){let g=this.pending.find(D=>D.id==t.id);console.log("NotifHelper::addPendingEvt::SKIP present",JSON.stringify(t),JSON.stringify(g));continue}let a=N(y(e),{minute:p(t.start.time)}),d=Date.parse(`${a.date} ${a.time}`),c=new Date(d),r=N(y(e),{minute:p(t.end.time)}),S=Date.parse(`${r.date} ${r.time}`),P=new Date(S),f=u(t.start.time),h=u(t.end.time),O=t.start.time.split(":")[0]>=12?"PM":"AM",v={title:`'${t.title}' Starting at ${f}`,body:`Be/Do '${t.title}' for ${t.duration} mins`,largeBody:`Of '${t==null?void 0:t.parent}' >> '${t.title}' (${t.score}) ends at ${h}
 Dismiss for reminder`,id:t.id,schedule:{at:c,allowWhileIdle:!0},actionTypeId:"atStart",iconColor:C(t.bgcolor),extra:{duration:t.duration,scorey:t.score,end:P,endsAt:h,name:t.title,parent:t==null?void 0:t.parent,startsAt:f,around:O},channelId:l!="web"?"LocNotifs":""};this.pending.push(v)}}scheduleLater(){o.schedule({notifications:[...this.pending]}).then(i=>{console.log("scheduleLater>>good",JSON.stringify(i))}).catch(i=>{console.log("scheduleLater>>ERROR",i),console.log(i)})}async cancel(i){for(let e=0;e<this.pending.length;e++)i==this.pending[e].id&&(console.log("cancel>>notif",i,JSON.stringify(this.pending[e])),this.doCancel({notifications:[this.pending[e]]}),this.pending.splice(e,1))}doCancel(i){o.cancel(i)}async removeDeliveredNotifications(i){return console.log("CapacitorNotificationsWeb::removeDeliveredNotifications"),o.removeDeliveredNotifications(i)}async removeAllDeliveredNotifications(){return console.log("CapacitorNotificationsWeb::removeAllDeliveredNotifications"),o.removeAllDeliveredNotifications()}}const I=new A;export{I as L};
