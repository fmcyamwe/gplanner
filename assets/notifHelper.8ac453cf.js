import{_ as m}from"./index.57b3fa58.js";import{r as S,C as O}from"./index.6b3e9238.js";import{a as g,p as f,b as h}from"./QCalendarTask.712d05e8.js";import{w as d,h as v}from"./utiFunc.f569f737.js";var N;(function(o){o[o.Sunday=1]="Sunday",o[o.Monday=2]="Monday",o[o.Tuesday=3]="Tuesday",o[o.Wednesday=4]="Wednesday",o[o.Thursday=5]="Thursday",o[o.Friday=6]="Friday",o[o.Saturday=7]="Saturday"})(N||(N={}));const n=S("LocalNotifications",{web:()=>m(()=>import("./web.5817dcd1.js"),["assets/web.5817dcd1.js","assets/index.6b3e9238.js","assets/index.57b3fa58.js","assets/index.f80becc5.css","assets/QCalendarTask.712d05e8.js"]).then(o=>new o.LocalNotificationsWeb)}),a=O.getPlatform();class P{constructor(){this.pending=[],this.realPlat=null,this.deliveredNotifications=[],this.doInit(),this.seen={},this.lastSeen=null}doInit(){a!="web"?(console.log("CapacitorNotificationsWeb>>ANDROID Platform",a),this.realPlat=a):(console.log("CapacitorNotificationsWeb>>WEB Platform",a),this.realPlat=a),this.checkPermissions(),this.addListeners(),this.createChannel(),this.registerActions(),this.getPending(),this.getDeliveredNotifications()}doPrint(){console.log("CapacitorNotificationsWeb>>","ALLGOOD")}getState(){return{platform:this.realPlat,pending:this.pending.length,delivered:this.deliveredNotifications.length}}async checkPermissions(){let i=await n.checkPermissions();if(console.log("checkPermissions>>CheckP",JSON.stringify(i)),i.display==="prompt"&&(i=await n.requestPermissions(),console.log("checkPermissions::requestP",JSON.stringify(i))),i.display!=="granted"&&console.log("checkPermissions::NOPE",i.display,i.receive),a!=="web"){let t=await n.checkExactNotificationSetting();console.log("ExactNotificationSetting>>CheckP",JSON.stringify(t)),t.exact_alarm!=="granted"&&(t=await n.changeExactNotificationSetting(),console.log("ExactNotificationSetting::requestP",JSON.stringify(t))),t.exact_alarm!=="granted"&&console.log("ExactNotificationSetting::NOPE",t.exact_alarm)}}notifClicked(i){console.log("notifClicked::WOAH >>clicked on notif:",i),chrome.tabs.create({url:i}),console.log("clicked on notif:",i),chrome.notifications.clear(i)}async addListeners(){if(a=="web"){await n.addListener("localNotificationReceived",i=>{console.log("localNotificationReceived",JSON.stringify(i)),i!==void 0?(this.deliveredNotifications.push(i),this.seen[i.id]=!0,this.lastSeen=i.id):(console.log("localNotificationReceived>>UNDEFINED...what to do?",i,JSON.stringify(this.seen),JSON.stringify(this.lastSeen)),this.lastSeen?this.lastSeen=null:console.log("localNotificationReceived>>UNDEFINED..inDeliv/pending?",i,JSON.stringify(this.deliveredNotifications),JSON.stringify(this.pending)))}),await n.addListener("localNotificationActionPerformed",i=>{console.log("localNotificationActionPerformed::ACtion>> ",JSON.stringify(i))});return}console.log("CapacitorNotificationsWeb::addListeners>>SKIPPED for ",a)}async getDeliveredNotifications(){let i=null;n.getDeliveredNotifications().then(t=>{console.log("getDeliveredNotifications",JSON.stringify(t)),i=t;for(const e in i.notifications)console.log("getDeliveredNotifications::Notif...inPENDING?"+e,JSON.stringify(i.notifications[e]),JSON.stringify(this.pending)),this.deliveredNotifications.push(i.notifications[e])}).catch(t=>{console.log("getDeliveredNotifications>>ERROR",JSON.stringify(t)),console.log(t)})}async createChannel(){if(a!=="web"){let i=await n.listChannels();console.log("createChannel",JSON.stringify(i));let t=!1;for(const s in i.channels)if(i.channels[s].id=="LocNotifs"){t=!0;break}if(t){console.log("createChannel>>WOO LocNotifs exists!!");return}await n.createChannel({id:"LocNotifs",name:"Notifs",description:"Blu Notifs",importance:5,visibility:1,vibration:!0});let e=await n.listChannels();console.log("createChannel>>channelz>>CREATED",JSON.stringify(e))}}async registerActions(){const i={start:{id:"start",title:"Start"},add:{id:"add",title:"Add3"},skip:{id:"skip",title:"Skip"},go:{id:"go",title:"Nav"},note:{id:"note",title:"Notey",input:!0}},t={id:"atStart",actions:[i.start,i.skip]},e={id:"atEnd",actions:[i.note]},s={id:"nav",actions:[i.start,i.go]};if(a!="web"){let l={types:[t,e,s]};await n.registerActionTypes(l);return}}async getPending(){const i=await n.getPending();console.log("getPending",JSON.stringify(i));for(const t in i.notifications){let e=i.notifications[t],s=e.schedule.at,l=Date.parse(s),r=new Date(s),c=l-Date.now();c<=0?console.log("getPending:: SKIPPED oldy>> ",c,JSON.stringify(s),JSON.stringify(l),JSON.stringify(r)):console.log("getPending:: Notif>>WOULDA>> ",JSON.stringify(e),JSON.stringify(s),JSON.stringify(l),JSON.stringify(new Date(l)),JSON.stringify(r))}}async schedule(i){n.schedule(i).then(t=>{console.log("schedule>>good",JSON.stringify(t)),console.log(t),this.deliveredNotifications.push(...i.notifications);let e=this.pending.length;this.pending=this.pending.filter(s=>!i.notifications.find(l=>l.id===s.id)),e!=this.pending.length?console.log("schedule>>PENDING change",e,this.pending.length):console.log("schedule>>PENDING SAME",e,this.pending.length)}).catch(t=>{console.log("schedule>>ERROR",JSON.stringify(t)),console.log(t),this.pending.push(...i.notifications)})}addPendingEvts(i,t){for(const e of i){let s=g(h(t),{minute:f(e.start.time)-1}),l=Date.parse(`${s.date} ${s.time}`),r=new Date(l),c=g(h(t),{minute:f(e.end.time)}),p=Date.parse(`${c.date} ${c.time}`),y=new Date(p),u={title:`'${e.title}' Starting at ${d(e.start.time)}`,body:` Be/Do '${e.title}' for ${e.duration} mins`,largeBody:` Be/Do '${e.title}' (${e.score}) from ${d(e.start.time)} to ${d(e.end.time)}`,id:e.id,schedule:{at:r,allowWhileIdle:!0},actionTypeId:"atStart",iconColor:v(e.bgcolor),extra:{duration:e.duration,scorey:e.score,end:y,endsAt:d(e.end.time),name:e.title},channelId:a!="web"?"LocNotifs":""};this.pending.push(u)}}scheduleLater(){n.schedule({notifications:[...this.pending]}).then(i=>{console.log("scheduleLater>>good",JSON.stringify(i))}).catch(i=>{console.log("scheduleLater>>ERROR",i),console.log(i)})}async cancel(i){for(let t=0;t<this.pending.length;t++)i==this.pending[t].id&&(console.log("cancel>>notif",i,JSON.stringify(this.pending[t])),this.doCancel({notifications:[this.pending[t]]}),this.pending.splice(t,1))}doCancel(i){n.cancel(i)}async removeDeliveredNotifications(i){return console.log("CapacitorNotificationsWeb::removeDeliveredNotifications"),n.removeDeliveredNotifications(i)}async removeAllDeliveredNotifications(){return console.log("CapacitorNotificationsWeb::removeAllDeliveredNotifications"),n.removeAllDeliveredNotifications()}}const C=new P;export{C as L};
